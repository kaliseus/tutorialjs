{"version":3,"file":"bundle.js","mappings":"oyBAGUA,ECHWC,EAAS,WAC1B,SAAAA,EAAYC,I,4FAAYC,CAAA,KAAAF,GACpBG,OAAOC,eAAeC,KAAM,WAAY,CACpCC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,MAAOR,EAAWS,QAAQ,OAAQ,KAE1C,C,UAoBC,O,EApBAV,E,EA4BA,EAAAW,IAAA,aAAAF,MAlBD,SAAkBG,GACd,IAEgCC,EAF5BC,EAAQ,EACRC,EAAUH,EAAcI,OAAQ,EAAEC,E,25BAAAC,CACnBN,GAAa,IAAhC,IAAAK,EAAAE,MAAAN,EAAAI,EAAAG,KAAAC,MAAkC,KAAzBC,EAAMT,EAAAJ,MACXK,GAASC,EAAUQ,OAAOD,GAC1BP,GACJ,CAAC,OAAAS,GAAAP,EAAAQ,EAAAD,EAAA,SAAAP,EAAAS,GAAA,CAED,IAAMC,EAAS,GAAMb,EAAQ,GAC7B,OAAOa,GAAU,EAAIC,OAAOD,GAAU,GAC1C,K,EApBC,EAAAhB,IAAA,cAAAF,MACD,WACI,OAAOJ,KAAKwB,SAASC,OAAO,GAAGC,OAAO1B,KAAKwB,SAASb,UAAYX,KAAKwB,QACzE,GAAC,CAAAlB,IAAA,cAAAF,MACD,WACI,IAAMG,EAAgBP,KAAKwB,SAASG,MAAM,GAAG,GACvCC,EAAUjC,EAAUkC,WAAWtB,GAC/BuB,EAAUnC,EAAUkC,WAAWtB,EAAgBqB,GACrD5B,KAAK+B,QAAUxB,EAAgBqB,EAAUE,CAC7C,GAAC,CAAAxB,IAAA,SAAAF,MAYD,WACI,QAAIJ,KAAKwB,UACmB,iBAAlBxB,KAAKwB,UACa,KAAzBxB,KAAKwB,SAASb,SACdX,KAAKgC,gBACRhC,KAAKiC,cACEjC,KAAK+B,UAAY/B,KAAKwB,SACjC,M,8EARC7B,CAAA,CA5ByB,G,mqBDGpBD,EAAO,IEDW,oBAAAwC,K,4FAAArC,CAAA,KAAAqC,EAAA,C,QAkBvB,O,EAlBuBA,E,EAAA,EAAA5B,IAAA,OAAAF,MACxB,WAAuC,IAAlC+B,EAAGC,UAAAzB,OAAA,QAAA0B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAAWE,EAAGF,UAAAzB,OAAA,QAAA0B,IAAAD,UAAA,GAAAA,UAAA,GAAG,UACxB,OAAOb,OAAOgB,KAAKC,MAAMD,KAAKE,UAAYH,EAAMH,GAAOA,GAC3D,GAAC,CAAA7B,IAAA,YAAAF,MACD,SAAUsC,GACN,OACIA,EAAIf,MAAM,EAAG,GAAI,IACjBe,EAAIf,MAAM,EAAG,GAAI,IACjBe,EAAIf,MAAM,EAAG,GAAI,IACjBe,EAAIf,MAAM,EAAG,GAErB,GAAC,CAAArB,IAAA,cAAAF,MACD,WACI,IAAMuC,EAAe3C,KAAK4C,OACpBhB,EAAUjC,EAAUkC,WAAWc,GAE/BE,EAAUF,EAAef,EADfjC,EAAUkC,WAAWc,EAAef,GAEpD,OAAO5B,KAAK8C,UAAUD,EAC1B,I,uEAACX,CAAA,CAlBuB,IFENa,SAASC,cAAc,cAC/BC,UAAYvD,EAAKuC,a","sources":["webpack://aula-93/./src/main.js","webpack://aula-93/./src/mudules/ValidaCPF.js","webpack://aula-93/./src/mudules/GeraCPF.js"],"sourcesContent":["import GeraCPF from './mudules/GeraCPF'\n\n(function () {\n    const gera = new GeraCPF()\n    const cpfGerado = document.querySelector('.resultado');\n    cpfGerado.innerText = gera.geraNovoCpf();\n\n})();","export default class ValidaCPF {\n    constructor(cpfEnviado) {\n        Object.defineProperty(this, 'cpfLimpo', {\n            writable: false,\n            enumerable: true,\n            configurable: false,\n            value: cpfEnviado.replace(/\\D+/g, '')\n        });\n    };\n    isSequecial() {\n        return this.cpfLimpo.charAt(0).repeat(this.cpfLimpo.length) === this.cpfLimpo;\n    };\n    geraNovoCpf() {\n        const cpfSemDigitos = this.cpfLimpo.slice(0,-2);\n        const digito1 = ValidaCPF.geraDigito(cpfSemDigitos);\n        const digito2 = ValidaCPF.geraDigito(cpfSemDigitos + digito1);\n        this.novoCPF = cpfSemDigitos + digito1 + digito2;\n    };\n    static geraDigito(cpfSemDigitos) {\n        let total = 0;\n        let reverso = cpfSemDigitos.length +1;\n        for (let numero of cpfSemDigitos) {\n            total += reverso * Number(numero);\n            reverso--;\n        }\n\n        const digito = 11 - (total % 11);\n        return digito <= 9 ? String(digito) : '0';\n    };\n    valida () {\n        if(!this.cpfLimpo) return false;\n        if(typeof this.cpfLimpo !== 'string') return false;\n        if(this.cpfLimpo.length !== 11) return false;\n        if(this.isSequecial()) return false;\n        this.geraNovoCpf();\n        return this.novoCPF === this.cpfLimpo;\n    };\n}\n","import ValidaCPF from \"./ValidaCPF\";\n\nexport default class GeraCPF {\n    rand(min = 100000000, max = 999999999) {\n        return String(Math.floor(Math.random() * (max - min) + min));\n    }\n    formatado(cpf){\n        return(\n            cpf.slice(0, 3) +'.' +\n            cpf.slice(3, 6) +'.' +\n            cpf.slice(6, 9) +'-' +\n            cpf.slice(9, 11)\n        )\n    }\n    geraNovoCpf() {\n        const cpfSemDigito = this.rand();\n        const digito1 = ValidaCPF.geraDigito(cpfSemDigito);\n        const digito2 = ValidaCPF.geraDigito(cpfSemDigito + digito1);\n        const novoCpf = cpfSemDigito + digito1 + digito2;\n        return this.formatado(novoCpf);\n    }\n}"],"names":["gera","ValidaCPF","cpfEnviado","_classCallCheck","Object","defineProperty","this","writable","enumerable","configurable","value","replace","key","cpfSemDigitos","_step","total","reverso","length","_iterator","_createForOfIteratorHelper","s","n","done","numero","Number","err","e","f","digito","String","cpfLimpo","charAt","repeat","slice","digito1","geraDigito","digito2","novoCPF","isSequecial","geraNovoCpf","GeraCPF","min","arguments","undefined","max","Math","floor","random","cpf","cpfSemDigito","rand","novoCpf","formatado","document","querySelector","innerText"],"sourceRoot":""}